class Solution {
    vector<int> findNSE(vector<int> &h){
        vector<int> nse(h.size());

        stack<int> s;
        s.push(h.size());

        for(int i=h.size()-1;i>=0;i--){
            while(s.top() != h.size() && h[s.top()] >= h[i]){
                s.pop();
            }
            nse[i] = s.top();
            s.push(i);
        }
        return nse;

    }

    vector<int> findPSE(vector<int> &h){
        vector<int> pse(h.size());

        stack<int> s;
        s.push(-1);

        for(int i=0;i<h.size();i++){
            while(s.top() != -1 && h[s.top()] >= h[i]){
                s.pop();
            }
            pse[i] = s.top();
            s.push(i);
        }
        return pse;

    }
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> nse = findNSE(heights);
        vector<int> pse = findPSE(heights);
        int maxArea = INT_MIN;
        for(int i=0;i<n;i++){
            int length = heights[i];
            
            int width = nse[i]-pse[i] - 1;

            int currArea = length * width;

            maxArea = max(maxArea,currArea);
        }
        return maxArea;
    }
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        vector<vector<int>> v;
        int n = matrix.size();
        int m = matrix[0].size();

        for(int i=0;i<n;i++){
            vector<int> t;
            for(int j=0;j<m;j++){
                t.push_back(matrix[i][j] - '0');
            }
            v.push_back(t);
        }


        int area = largestRectangleArea(v[0]);
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                if(v[i][j]){
                    v[i][j] += v[i-1][j];
                }
                else{
                    v[i][j] = 0;
                }
            }
            area = max(area,largestRectangleArea(v[i]));
        }
        return area;



    }
};
