class Solution {
public:
    vector<int> findNSE(vector<int> &h){
        vector<int> nse(h.size());

        stack<int> s;
        s.push(h.size());

        for(int i=h.size()-1;i>=0;i--){
            while(s.top() != h.size() && h[s.top()] >= h[i]){
                s.pop();
            }
            nse[i] = s.top();
            s.push(i);
        }
        return nse;

    }

    vector<int> findPSE(vector<int> &h){
        vector<int> pse(h.size());

        stack<int> s;
        s.push(-1);

        for(int i=0;i<h.size();i++){
            while(s.top() != -1 && h[s.top()] >= h[i]){
                s.pop();
            }
            pse[i] = s.top();
            s.push(i);
        }
        return pse;

    }
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> nse = findNSE(heights);
        vector<int> pse = findPSE(heights);
        int maxArea = 0;
        for(int i=0;i<n;i++){
            int length = heights[i];
            int width = nse[i]-pse[i] - 1;

            int currArea = length * width;

            maxArea = max(maxArea,currArea);
        }
        return maxArea;
    }
};
